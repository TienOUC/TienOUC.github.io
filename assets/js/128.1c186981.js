(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{655:function(t,s,n){"use strict";n.r(s);var a=n(4),v=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("《JavaScript 高级程序设计》第三版 4.1.3 中，关于参数的传递这样写到："),n("br"),t._v(" "),n("code",[t._v("ECMA中所有函数的参数都是按值传递的。")])]),t._v(" "),n("p",[t._v("我们都知道，JS 中的数据类型分两种，"),n("code",[t._v("基本数据类型")]),t._v(" 和 "),n("code",[t._v("引用数据类型")]),t._v("，上面这句话让人疑惑的地方在于，引用类型的值传递的时候为什么也是按值传递的。")]),t._v(" "),n("p",[t._v("在解决这个疑惑之前，先探究一下什么是按值传递(call by value)，什么是按引用传递(call by reference)。")]),t._v(" "),n("p",[t._v("这属于计算机科学里的求值策略("),n("strong",[t._v("Evaluation Strategy")]),t._v(")，它决定变量之间、函数调用时实参和形参之间值是如何传递的。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("值传递(call by value)")]),t._v(" "),n("p",[t._v("常用求值策略，函数的形参是被调用时所传实参的副本。修改形参的值并不会影响实参。")])]),t._v(" "),n("li",[n("p",[t._v("引用传递(call by reference)")]),t._v(" "),n("p",[t._v("函数的形参接受实参的隐式引用，而不再是副本。这意味着函数的形参的值如果被修改，实参也会被修改。同时两者指向相同的值。")])])]),t._v(" "),n("p",[t._v("我们再回过头来看 JS 中的两种数据类型。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("基本数据类型")]),t._v(" "),n("p",[t._v("保存在栈内存中的简单数据，有 "),n("code",[t._v("Number")]),t._v(" 、 "),n("code",[t._v("String")]),t._v(" 、 "),n("code",[t._v("Boolean")]),t._v(" 、 "),n("code",[t._v("Null")]),t._v(" 、 "),n("code",[t._v("Undefined")]),t._v(" 、以及 ES6 新增的"),n("code",[t._v("Symbol")]),t._v(" 。")])]),t._v(" "),n("li",[n("p",[t._v("引用类型数据")]),t._v(" "),n("p",[t._v("保存在堆内存中的对象，有 "),n("code",[t._v("Object")]),t._v(" 、 "),n("code",[t._v("Array")]),t._v(" 和 "),n("code",[t._v("Function")]),t._v("，这里堆内存中的数据不能直接访问或者操作，只能操作对象在栈内存中的引用地址。")])])]),t._v(" "),n("p",[t._v("接下来我们来看简单的例子会比较直观。")]),t._v(" "),n("ul",[n("li",[t._v("基本类型的传值示例：")])]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tnum "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" count "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("count"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 20")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("上面例子中，函数调用时，其形参 "),n("code",[t._v("num")]),t._v(" 只是复制了一份实参 "),n("code",[t._v("count")]),t._v(" 的副本，函数内部的变化并不会影响到外部实参 "),n("code",[t._v("count")]),t._v(" 。可以将这里两个变量的初始值在栈内存中的存储以下面的结构简单具像化。")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量")]),t._v(" "),n("th",[t._v("值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("count")]),t._v(" "),n("td",[t._v("20")])]),t._v(" "),n("tr",[n("td",[t._v("num")]),t._v(" "),n("td",[t._v("20")])])])]),t._v(" "),n("p",[t._v("函数调用后")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("变量")]),t._v(" "),n("th",[t._v("值")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("count")]),t._v(" "),n("td",[t._v("20")])]),t._v(" "),n("tr",[n("td",[t._v("num")]),t._v(" "),n("td",[t._v("30")])])])]),t._v(" "),n("ul",[n("li",[t._v("我们再来看引用类型(对象)的示例")])]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Tony'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tobj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Mathew'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Mathew")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setName")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Tony")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("看到这里，第一感觉是函数调用时修改了对象 "),n("code",[t._v("person")]),t._v(" 的引用地址，但为什么最后一行的输出依然是 "),n("code",[t._v("Tony")]),t._v(" 呢？既然没有变化，那这个示例中函数的参数肯定就不是按引用传递了，为什么？")]),t._v(" "),n("p",[t._v("正如前文所述，"),n("code",[t._v("引用类型数据在栈内存中保存的实际上是对象在堆内存中的引用地址。通过这个引用地址可以快速查找到保存在堆内存中的对象")]),t._v("。")]),t._v(" "),n("p",[t._v("所以此处可以用下面的简单具像化结构来解释。")]),t._v(" "),n("p",[t._v("当 person")]),t._v(" "),n("table",[n("tr",[n("th"),t._v(" "),n("th",{staticStyle:{"text-align":"center"},attrs:{colspan:"2"}},[t._v("栈内存")]),t._v(" "),n("th",[t._v("堆内存")])]),t._v(" "),n("tr",[n("td",[t._v("变量")]),t._v(" "),n("td",[t._v("值")]),t._v(" "),n("td",[t._v("地址")]),t._v(" "),n("td",[t._v("对象")])]),t._v(" "),n("tr",[n("td",[t._v("person")]),t._v(" "),n("td",[t._v("<#001>")]),t._v(" "),n("td",[t._v("#001 ")]),t._v(" "),n("td",[t._v("{name: 'Tony'}")])])]),t._v(" "),n("p",[t._v("作为实参 "),n("code",[t._v("person")]),t._v(" 进入函数 "),n("code",[t._v("setName")]),t._v(" 后， 最开始形参 "),n("code",[t._v("obj")]),t._v(" 拷贝了其地址副本，这个地址副本和 "),n("code",[t._v("person")]),t._v(" 的地址指向是相同的。")]),t._v(" "),n("table",[n("tr",[n("th"),t._v(" "),n("th",{staticStyle:{"text-align":"center"},attrs:{colspan:"2"}},[t._v("栈内存")]),t._v(" "),n("th",[t._v("堆内存")])]),t._v(" "),n("tr",[n("td",[t._v("变量")]),t._v(" "),n("td",[t._v("值")]),t._v(" "),n("td",[t._v("地址")]),t._v(" "),n("td",[t._v("对象")])]),t._v(" "),n("tr",[n("td",[t._v("person")]),t._v(" "),n("td",[t._v("<#001>")]),t._v(" "),n("td",[t._v("#001 ")]),t._v(" "),n("td",[t._v("{name: 'Tony'}")])]),t._v(" "),n("tr",[n("td",[t._v("obj")]),t._v(" "),n("td",[t._v("<#001>")]),t._v(" "),n("td",[t._v("#001")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td"),t._v(" "),n("td",[t._v("<#002>")]),t._v(" "),n("td",[t._v("#002")]),t._v(" "),n("td",[t._v("{name: 'Mathew'}")])])]),t._v(" "),n("p",[t._v("如果在 "),n("code",[t._v("obj")]),t._v(" 赋值之前对 "),n("code",[t._v("obj")]),t._v(" 拷贝的地址副本进行操作，那么指向这个地址的变量都会发生变化，即若此时修改 "),n("code",[t._v("obj")]),t._v(" ,外部的 "),n("code",[t._v("person")]),t._v(" 也会被改变。")]),t._v(" "),n("p",[t._v("但是，函数内部紧接着对 "),n("code",[t._v("obj")]),t._v(" 重新赋了值， 改变了地址副本的指向，使得 "),n("code",[t._v("obj")]),t._v(" 指向了新对象 "),n("code",[t._v("{name: 'Mathew'}")])]),t._v(" "),n("table",[n("tr",[n("th"),t._v(" "),n("th",{staticStyle:{"text-align":"center"},attrs:{colspan:"2"}},[t._v("栈内存")]),t._v(" "),n("th",[t._v("堆内存")])]),t._v(" "),n("tr",[n("td",[t._v("变量")]),t._v(" "),n("td",[t._v("值")]),t._v(" "),n("td",[t._v("地址")]),t._v(" "),n("td",[t._v("对象")])]),t._v(" "),n("tr",[n("td",[t._v("person")]),t._v(" "),n("td",[t._v("<#001>")]),t._v(" "),n("td",[t._v("#001 ")]),t._v(" "),n("td",[t._v("{name: 'Tony'}")])]),t._v(" "),n("tr",[n("td",[t._v("obj")]),t._v(" "),n("td",[t._v("<#002>")]),t._v(" "),n("td",[t._v("#002")]),t._v(" "),n("td",[t._v("{name: 'Mathew'}")])])]),t._v(" "),n("p",[t._v("这时 "),n("code",[t._v("obj")]),t._v(" 和 "),n("code",[t._v("person")]),t._v(" 之间就不会有任何联系了，所以 "),n("code",[t._v("obj")]),t._v(" 的改变并不会影响 "),n("code",[t._v("person")]),t._v("。")]),t._v(" "),n("p",[t._v("对于上面示例二中的参数传递（"),n("strong",[t._v("传递对象引用的副本")]),t._v("），也被称作共享传递(call by sharing)，拷贝地址副本也是一种值的传递，所以书中才会写到 "),n("code",[t._v("ECMA中所有函数的参数都是按值传递的。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);